#+Title: Emacs Config Based On Kickstarter
#+Author: Bastiaan 
#+Description: My config mainly aimed at writing SQL, Python and Org docs.
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#use-package][Use Package]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#good-defaults][Good Defaults]]
  - [[#set-theme][Set Theme]]
  - [[#landing-page-dashboard][Landing page (dashboard)]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
  - [[#smooth-scrolling][Smooth scrolling]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#eglot][Eglot]]
  - [[#yasnippet][Yasnippet]]
  - [[#eval-buffers-get-automatic-h-split][Eval buffers get automatic h-split]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#docker][Docker]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#which-key][Which-Key]]
- [[#runtime-performance][Runtime Performance]]

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
    (setq ring-bell-function 'ignore)
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that start/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file youâ€™re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Use Package
We use the default package manager package.el with use-package. Alternative package managers (straight.el, elpaca, etc.) are useful if you want to
install packages from git repositories, if you want a specific, not very popular package that is not available on elpa or melpa,
or you want UI (elpaca) and other things.

If you are interested in these other package managers, check out their git repositories or search for more package managers.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
Check out the use-package [[https://www.gnu.org/software/emacs/manual/use-package.html][documentation]] to see how to use it.
With Emacs 29 use-package is now built-in.
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

** Evil Mode
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).

- And also change general.el keybindings and setup (general-evil-setup, :states, etc.)
#+begin_src emacs-lisp
    (use-package evil
      :init
      (evil-mode)
      :custom
      (evil-want-keybinding nil)
      (evil-want-C-u-scroll t)
      (evil-want-C-i-jump nil)
      (evil-undo-system 'undo-redo)
      (org-return-follows-link t)
      :config
      (evil-set-initial-state 'eat-mode 'insert)
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil)))

    (use-package key-chord
      :after evil
      :config
     (setq key-chord-two-keys-delay 0.4)   ;; Max time (in seconds) between the two keys
     (setq key-chord-one-key-delay 0.3)    ;; Delay when both keys are the same (like "jj")

      (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
      (key-chord-mode 1))
     
#+END_SRC
** General Keybindings
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).
#+begin_src emacs-lisp
                (use-package general
                  :config
                  (general-evil-setup)
                  ;; Set up 'SPC' as the leader key
                  (general-create-definer start/leader-keys
                    :states '(normal insert visual motion emacs)
                    :keymaps 'override
                    :prefix "SPC"           ;; Set leader key
                    :global-prefix "C-SPC") ;; Set global leader key

                  (start/leader-keys
                    "." '(find-file :wk "Find file")
                    "TAB" '(comment-line :wk "Comment lines")
                    "p" '(projectile-command-map :wk "Projectile command map"))

                  (start/leader-keys
                    "f" '(:ignore t :wk "Find")
                    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
                    "f r" '(consult-recent-file :wk "Recent files")
                    "f f" '(consult-fd :wk "Fd search for files")
                    "f g" '(consult-ripgrep :wk "Ripgrep search in files")
                    "f l" '(consult-line :wk "Find line")
                    "f i" '(consult-imenu :wk "Imenu buffer locations"))

                  (start/leader-keys
                    "b" '(:ignore t :wk "Buffer Bookmarks")
                    "b b" '(consult-buffer :wk "Switch buffer")
                    "b k" '(kill-this-buffer :wk "Kill this buffer")
                    "b i" '(ibuffer :wk "Ibuffer")
                    "b n" '(next-buffer :wk "Next buffer")
                    "b p" '(previous-buffer :wk "Previous buffer")
                    "b r" '(revert-buffer :wk "Reload buffer")
                    "b j" '(consult-bookmark :wk "Bookmark jump"))

                  (start/leader-keys
                    "d" '(:ignore t :wk "Dired")
                    "d v" '(dired :wk "Open dired")
                    "d j" '(dired-jump :wk "Dired jump to current"))

                  (start/leader-keys
                    "e" '(:ignore t :wk "Eglot Evaluate")
                    "e e" '(eglot-reconnect :wk "Eglot Reconnect")
                    "e f" '(eglot-format :wk "Eglot Format")
                    "e l" '(consult-flymake :wk "Consult Flymake")
                    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
                    "e r" '(eval-region :wk "Evaluate elisp in region"))

                  (start/leader-keys
                    "g" '(:ignore t :wk "Git")
                    "g g" '(magit-status :wk "Magit status"))

                  (start/leader-keys
                    "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
                    "h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
                    "h r" '((lambda () (interactive)
                              (load-file "~/.config/emacs/init.el"))
                            :wk "Reload Emacs config"))

                  (start/leader-keys
                    "s" '(:ignore t :wk "Show")
                    "s e" '(eat :wk "Eat terminal"))

                  (start/leader-keys
                    "t" '(:ignore t :wk "Toggle")
                    "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
                    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")))

                ;; use vim motions for window navigation 
            (define-key evil-normal-state-map (kbd "M-h") 'evil-window-left)
            (define-key evil-normal-state-map (kbd "M-l") 'evil-window-right)
            (define-key evil-normal-state-map (kbd "M-j") 'evil-window-down)
            (define-key evil-normal-state-map (kbd "M-k") 'evil-window-up)

    ;; ;; in vertico (the buffer switch menu triggered with SPC b b) I want j and k to navigate vim-like
    (with-eval-after-load 'vertico
      (define-key vertico-map (kbd "C-j") 'vertico-next)
      (define-key vertico-map (kbd "C-k") 'vertico-previous))

#+end_src

** Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      ;; hide some UI stuff
      (menu-bar-mode nil)         ;; Disable the menu bar
      (scroll-bar-mode nil)       ;; Disable the scroll bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      (inhibit-startup-screen t)  ;; Disable welcome screen

      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode nil)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      ;;(dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      ;;(recentf-mode t) ;; Enable recent file mode

      ;;(global-visual-line-mode t)           ;; Enable truncated lines
      ;;(display-line-numbers-type 'relative) ;; Relative line numbers
      (global-display-line-numbers-mode t)  ;; Display line numbers
      
      (tab-width 4)

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             )
      ;; Fix general.el leader key not working instantly in messages buffer with evil mode
      :ghook ('after-init-hook
              (lambda (&rest _)
                (when-let ((messages-buffer (get-buffer "*Messages*")))
                  (with-current-buffer messages-buffer
                    (evil-normalize-keymaps))))
              nil nil t)
      )
#+end_src
** Set Theme
Set gruvbox theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :config
      (load-theme 'gruvbox-dark-hard t)) ;; We need to add t to trust this package
#+end_src

** Landing page (dashboard)
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq inhibit-startup-screen t)
  (setq dashboard-startup-banner 'official)
  (setq dashboard-center-content t)         ;; Center content
  (setq dashboard-set-heading-icons t)      ;; Optional: adds icons
  (setq dashboard-set-file-icons t)         ;; Optional: adds file icons
  (setq dashboard-items '((recents  . 5)
                          (projects . 5)
                          (bookmarks . 5)))
  :config
  (dashboard-setup-startup-hook))

#+end_src

** Transparency
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 80)) ;; For all new frames henceforth
#+end_src

** Fonts
*** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        ;; :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    ;;(add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
    
;; Text zooming like doom emacs, without shift
        (global-set-key (kbd "C-=") 'text-scale-increase)  ;; Does not require shift key this way
        (global-set-key (kbd "C-+") 'text-scale-increase)  
        (global-set-key (kbd "C--") 'text-scale-decrease)
        (global-set-key (kbd "C-0") (lambda () (interactive) (text-scale-set 0)))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

** Smooth scrolling
Control scrolling settings here. Speed and distance can be adjusted.
#+BEGIN_SRC emacs-lisp
(defun smooth-scroll-down ()
  "Scroll down smoothly by half a page."
  (interactive)
  (dotimes (_ (/ (window-height) 8)) ;; Adjust this number for speed
    (scroll-up 3)
    (sit-for 0.0001)))  ;; Adds a small delay (in seconds)

(defun smooth-scroll-up ()
  "Scroll up smoothly by half a page."
  (interactive)
  (dotimes (_ (/ (window-height) 8))
    (scroll-down 3)
    (sit-for 0.0001)))  ;; Adds a small delay (in seconds)

;; Bind them to the keys
(define-key evil-normal-state-map (kbd "C-d") 'smooth-scroll-down)
(define-key evil-normal-state-map (kbd "C-u") 'smooth-scroll-up)
#+end_src

* Development
** Projectile
Project interaction library for Emacs, like file/project jumping, toggle betwee ncode and test, etc.
#+begin_src emacs-lisp
    (use-package projectile
      :init
      (projectile-mode)
      :custom
      (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
      (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
      (projectile-project-search-path '("~/projects/" "~/work/" ("~/github" . 1)))) ;; . 1 means only search the first subdirectory level for projects
    ;; Use Bookmarks for smaller, not standard projects
#+end_src

** Eglot
Language Server Protocol Support for Emacs. The built-in is now Eglot (with emacs 29).

Eglot is fast and minimal, but requires manual setup for LSP servers (downloading).
For more [[https://www.gnu.org/software/emacs/manual/html_mono/eglot.html][information how to use.]] One alternative to Eglot is Lsp-mode, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] page for more information.

Eglot is easy to set up, but the only difficult part is downloading and setting up the lsp servers.
After that just add a hook with eglot-ensure to automatically start eglot for a given file type. And you are done.

As an example to use C, C++ you need to install clangd(or ccls) and uncomment the following lines. Now the language server will start automatically when opening any c,c++ file.

A harder example is Lua. Download the lua-language-server from their git repository, make the lua-language-server file executable at lua-language-server/bin.
Uncomment the following lines and change the path to the language server executable. Now the language server will work.
Or add the lua-language-server executable to your path.

If you can use a package manager just install the lsp server and add a hook.
Use visual block to uncomment easily in Org documents (C-v).
#+begin_src emacs-lisp
    (use-package eglot
    	:ensure nil ;; `eglot` is built into Emacs 29, so no need to install
    	:hook ((go-mode python-mode c-mode c++-mode sql-mode) . eglot-ensure) ;; Auto-start for these languages
    	:custom
    	(eglot-events-buffer-size 0)  ;; No event buffers
    	(eglot-autoshutdown t)        ;; Shutdown unused servers
    	(eglot-report-progress nil)   ;; Disable verbose LSP messages
    	:config
    	(add-to-list 'eglot-server-programs
    				 '(go-mode . ("gopls"))) ;; Manually specify `gopls` for Go
    	(add-to-list 'eglot-server-programs
    				 '(python-mode . ("pyright-langserver" "--stdio"))) ;; Python
    	(add-to-list 'eglot-server-programs ;; C
    				 '(c-mode . ("clangd")))
    	(add-to-list 'eglot-server-programs
    	             '(c++-mode . ("clangd"))) ;; C++
    	(add-to-list 'eglot-server-programs
    				 '(sql-mode . ("sqls"))) ;; SQL language server
    )
#+end_src
** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Eval buffers get automatic h-split
Makes buffers like the output terminal for python script automatically placed horizontally with line height X.
#+BEGIN_SRC emacs-lisp
(add-to-list 'display-buffer-alist
             '("\\*.*\\*"  ;; Match all buffers with `*` in the name (adjust as needed)
               (display-buffer-reuse-window display-buffer-in-side-window)
               (side . bottom)    ;; Open at the bottom
               (window-height . 12)))  ;; Set height to 12 lines

#+END_SRC
** Language modes
It's not required for every language like C,C++,C#,Java,Javascript etc. to install language mode packages,
but for more specific languages it is necessary for syntax highlighting.
If you want to use TreeSitter, check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][website]] or try out [[https://github.com/renzmann/treesit-auto][Treesit-auto]].
Currently it's tedious to use Treesitter, because emacs has not yet fully migrated to it.

*** Lua mode
Example, how to setup a language mode (if you don't want it, feel free to delete it).
Use SPC-tab to uncomment the lines.
#+begin_src emacs-lisp
    (use-package lua-mode
      :mode "\\.lua\\'") ;; Only start in a lua file
#+end_src

*** Python mode 
#+BEGIN_SRC emacs-lisp
    (use-package python-mode
      :mode "\\.py\\'") 

    (defun my-python-eval-region-or-line ()
      "Evaluate the selected region or the current line in Python, displaying results in a small window."
      (interactive)
      (let ((output-buffer (get-buffer-create "*Python Output*"))
            (code (if (use-region-p)
                      (buffer-substring-no-properties (region-beginning) (region-end))
                    (thing-at-point 'line t))))
        (with-current-buffer output-buffer
          (erase-buffer)) ;; Clear previous output
        (python-shell-send-string code) ;; Removed output-buffer argument
        (display-buffer output-buffer '(display-buffer-below-selected . ((window-height . 10))))))

(add-hook 'python-mode-hook
          (lambda ()
            (eglot-ensure)
            (setq-local eglot-format-buffer-function
                        (lambda () (call-process "black" nil nil nil (buffer-file-name)))
                        )))

#+END_SRC

*** SQL Mode
Includes formatting on file save.

**** pgformatter
SQL formatting requires pgformatter to be installed. Pacman in Arch sometimes does not work because it is not the right version. 

Download pgformatter via:
git clone https://github.com/darold/pgFormatter.git
cd pgFormatter
perl Makefile.PL
make
sudo make install
which pg_format
pg_format --version

Arguments can be passed on to configure the pg_formatter options.
Example: pg_format --spaces 2 --comma-start

**** psql
Also get psql (sometimes called postgresql, depending package manager).

**** SQL config
#+BEGIN_SRC emacs-lisp
                (require 'sql)
                (setq sql-interactive-mode-hook
                      (lambda ()
                        (setq sql-ask-about-save nil)
                        (setq sql-interactive-mode-prompt-regexp "^[^>]*> ")
                        (setq sql-interactive-mode-output-destination 'buffer)))

                ;; Ensure SQL buffers have proper indentation and appearance
                (add-hook 'sql-mode-hook
                          (lambda ()
                            (setq sql-indent-offset 2)  ;; Indentation level
                            (display-line-numbers-mode)))  ;; Line numbers
            
        (defun my-sqlformat-buffer ()
          "Format the current buffer with pg_format."
          (interactive)
          (when (executable-find "pg_format")
            (let ((orig-point (point)))
              (shell-command-on-region (point-min) (point-max) "pg_format --comma-start -"
                                       (current-buffer) t)
              (goto-char orig-point))))

        (add-hook 'sql-mode-hook
                  (lambda ()
                    (eglot-ensure)
                    (add-hook 'before-save-hook #'my-sqlformat-buffer nil t)))
    
    ;; Use this function to connect to redshift using environment variables    
    (defun my/sql-connect-redshift-env ()
      "Connect to Redshift using environment variables."
      (interactive)
      (let ((user     (getenv "REDSHIFT_USER"))
            (password (getenv "REDSHIFT_PASSWORD"))
            (host     (getenv "REDSHIFT_HOST"))
            (port     (string-to-number (or (getenv "REDSHIFT_PORT") "5439")))
            (database (getenv "REDSHIFT_DATABASE")))
        (unless (and user password host database)
          (user-error "Missing one or more required REDSHIFT_* environment variables"))
        (sql-connect
         `((sql-product . postgres)
           (sql-user . ,user)
           (sql-password . ,password)
           (sql-server . ,host)
           (sql-port . ,port)
           (sql-database . ,database)))))

#+END_SRC

*** Go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'"
  :hook ((before-save . gofmt-before-save))) ;; Auto-format before saving
#+END_SRC

*** Org Mode
The greatest Emacs package of them all. Enables literate programming. Also good for documenting in markdown style.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.

      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      ;;(org-mode . (lambda ()
      ;;              (setq-local electric-pair-inhibit-predicate
      ;;                          `(lambda (c)
      ;;                             (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      )
#+end_src

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src

** Terminal
*** Eat
Eat (Emulate A Terminal) is a terminal emulator within Emacs.
It's more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell, if you want to use bash, zsh etc., check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.

I found that eat is fine for commands but not for interactive programs like lazygit. Use CLI commands instead. vterm did not do much better.
#+begin_src emacs-lisp
    (use-package eat
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

*** * Other Packages
All the package setups that don't need much tweaking.

** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts!

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

** Docker
Use Emacs to interact with Docker containers, images, and volumes.

#+begin_src emacs-lisp
    (use-package docker
      :ensure t
      :bind ("C-c d" . docker))

    (use-package dockerfile-mode
      :ensure t
      :mode "Dockerfile\\'")

    ;; (use-package docker-tramp
    ;;   :ensure t
    ;;   :defer t
    ;;   :custom
    ;;   (docker-tramp-use-names t))  ;; lets you use container names in TRAMP paths
#+end_src

** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popupinfo delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
      ;; (corfu-scroll-margin 5)        ;; Use scroll margin
      (completion-ignore-case t)
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)
      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Take care when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :init
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.
      ;; The functions that are added later will be the first in the list

      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-to-list 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-to-list 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-to-list 'completion-at-point-functions #'cape-keyword) ;; Keyword/Snipet completion

      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-to-list 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-to-list 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-to-list 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

This package uses emacs native functions, unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides search and navigation commands based on the Emacs completion function.
Examples are the handy SPC b b switch-buffer and command to navigate the emacs docs.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      :config
      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      ;; (consult-customize
      ;; consult-theme :preview-key '(:debounce 0.2 any)
      ;; consult-ripgrep consult-git-grep consult-grep
      ;; consult-bookmark consult-recent-file consult-xref
      ;; consult--source-bookmark consult--source-file-register
      ;; consult--source-recent-file consult--source-project-recent-file
      ;; :preview-key "M-."
      ;; :preview-key '(:debounce 0.4 any))

      ;; By default `consult-project-function' uses `project-root' from project.el.
      ;; Optionally configure a different project root function.
       ;;;; 1. project.el (the default)
      ;; (setq consult-project-function #'consult--default-project--function)
       ;;;; 2. vc.el (vc-root-dir)
      ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
       ;;;; 3. locate-dominating-file
      ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
       ;;;; 4. projectile.el (projectile-project-root)
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))
       ;;;; 5. No project support
      ;; (setq consult-project-function nil)
      )
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add â€˜:diminishâ€™ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Which-Key
Which-key is a helper utility for showing what key combinations do what in a pop up in the bottom (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.3)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
    (setq comp-deferred-compilation t)
    (setq comp-async-jobs-number 8)
#+end_src
